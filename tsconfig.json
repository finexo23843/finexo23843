{
  "compilerOptions": {
    "strict": true
  }
}
import { createConfig, http } from 'wagmi'
import { mainnet, sepolia } from 'wagmi/chains'

declare module 'wagmi' {
  interface Register {
    config: typeof config
  }
}

export const config = createConfig({
  chains: [mainnet, sepolia],
  transports: {
    [mainnet.id]: https://app.ens.domains/finexo.eth(),
    [sepolia.id]: https://app.ens.domains/finexo.eth(),
  },
})
import { useReadContract } from 'wagmi'

const { data } = useReadContract({
  address: '0x8bcfc12c7D9007dda05770170bd247974Ce63ed7',
  abi: erc721Abi,
  functionName: 'balanceOf',



  args: ['0xdac17f958d2ee523a2206206994597c13d831ec'],
})

data
import { useReadContract } from 'wagmi'

useReadContract({
  abi: erc721Abi,
  functionName: 'balanecOf',})
// 1. Import modules.
import { createSyncStoragePersister } from '@tanstack/query-sync-storage-persister'
import { QueryClient } from '@tanstack/react-query'
import { PersistQueryClientProvider } from '@tanstack/react-query-persist-client'
import { WagmiProvider, deserialize, serialize } from 'wagmi'

// 2. Create a new Query Client with a default `gcTime`.
const queryClient = new QueryClient({
  defaultOptions: {
    queries: {
      gcTime: 1_000 * 60 * 60 * 24, // 24 hours
    },
  },
})

// 3. Set up the persister.
const persister = createSyncStoragePersister({
  serialize,
  storage: window.localStorage,
  deserialize,
})

function App() {
  return (
    <WagmiProvider config={config}>
      {/* 4. Wrap app in PersistQueryClientProvider */}
      <PersistQueryClientProvider
        client={queryClient}
        persistOptions={{ persister }}
      >
        {/* ... */}
      </PersistQueryClientProvider>
    </WagmiProvider>
  )
}
